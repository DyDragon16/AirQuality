import React from "react";
import { WeatherData } from "@/types/weather";

interface DailyForecastProps {
	weatherData: WeatherData;
}

const DailyForecast = ({ weatherData }: DailyForecastProps) => {
	// L·∫•y d·ªØ li·ªáu d·ª± b√°o theo ng√†y t·ª´ API
	const dailyForecasts = weatherData.forecasts?.daily || [];

	// H√†m l·∫•y m√†u d·ª±a tr√™n ch·ªâ s·ªë AQI
	const getAqiColorClass = (aqi: number) => {
		if (aqi <= 50) return "bg-green-500";
		if (aqi <= 100) return "bg-yellow-500";
		if (aqi <= 150) return "bg-orange-500";
		if (aqi <= 200) return "bg-red-500";
		if (aqi <= 300) return "bg-purple-500";
		return "bg-red-800";
	};

	// H√†m l·∫•y bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt d·ª±a tr√™n condition
	const getWeatherIcon = (condition: string, probabilityOfRain?: number) => {
		if (probabilityOfRain && probabilityOfRain >= 50) return "üåßÔ∏è";

		const conditionLower = condition?.toLowerCase() || "";
		if (
			conditionLower.includes("rain") ||
			conditionLower.includes("thunderstorm")
		)
			return "üåßÔ∏è";
		if (conditionLower.includes("cloud")) return "‚òÅÔ∏è";
		if (conditionLower.includes("sunny") || conditionLower.includes("clear"))
			return "‚òÄÔ∏è";
		if (conditionLower.includes("snow")) return "‚ùÑÔ∏è";
		if (conditionLower.includes("fog") || conditionLower.includes("mist"))
			return "üå´Ô∏è";

		return "‚òÅÔ∏è"; // M·∫∑c ƒë·ªãnh
	};

	// H√†m l·∫•y h∆∞·ªõng m≈©i t√™n gi√≥
	const getWindDirection = (direction: number) => {
		if (direction < 45 || direction >= 315) return "‚Üë"; // North
		if (direction >= 45 && direction < 135) return "‚Üí"; // East
		if (direction >= 135 && direction < 225) return "‚Üì"; // South
		return "‚Üê"; // West
	};

	// H√†m chuy·ªÉn ƒë·ªïi ng√†y sang m√∫i gi·ªù Vi·ªát Nam (UTC+7)
	const getVietnamTime = (date: Date): Date => {
		// S·ª≠ d·ª•ng timezone c·ªßa Vi·ªát Nam (UTC+7)
		const utcTime = date.getTime() + date.getTimezoneOffset() * 60000;
		return new Date(utcTime + 7 * 3600000); // UTC+7
	};

	// H√†m l·∫•y t√™n ng√†y trong tu·∫ßn (ti·∫øng Vi·ªát) - ƒë·ªìng b·ªô v·ªõi backend
	const getDayName = (date: Date) => {
		const inputDate = new Date(date);
		const today = getVietnamTime(new Date());

		// Set c·∫£ 2 v·ªÅ ƒë·∫ßu ng√†y ƒë·ªÉ so s√°nh ch√≠nh x√°c
		const todayStart = new Date(today);
		todayStart.setHours(0, 0, 0, 0);

		const compareDate = getVietnamTime(inputDate);
		compareDate.setHours(0, 0, 0, 0);

		// T·∫°o m·ªôt b·∫£n sao c·ªßa today ƒë·ªÉ t√≠nh to√°n ng√†y mai
		const tomorrow = new Date(todayStart);
		tomorrow.setDate(tomorrow.getDate() + 1);

		// So s√°nh ng√†y
		if (compareDate.getTime() === todayStart.getTime()) {
			return "H√¥m nay";
		} else if (compareDate.getTime() === tomorrow.getTime()) {
			return "Ng√†y mai";
		}

		// L·∫•y th·ª© trong tu·∫ßn
		const days = ["CN", "T2", "T3", "T4", "T5", "T6", "T7"];
		return days[compareDate.getDay()];
	};

	// N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu d·ª± b√°o, hi·ªÉn th·ªã th√¥ng b√°o
	if (dailyForecasts.length === 0) {
		return (
			<div className="text-center text-gray-500">
				Kh√¥ng c√≥ d·ªØ li·ªáu d·ª± b√°o theo ng√†y
			</div>
		);
	}

	return (
		<div>
			<h3 className="text-lg font-medium mb-4 text-gray-900">
				D·ª± b√°o ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ (AQI) t·∫°i {weatherData.name}
			</h3>

			<div className="bg-[#1f2937] text-white rounded-lg p-2">
				<div className="overflow-x-auto">
					<table className="w-full text-sm">
						<tbody>
							{dailyForecasts.map((forecast, index) => {
								// L·∫•y ng√†y t·ª´ timestamp
								const forecastDate = new Date(forecast.ts);
								// L·∫•y t√™n ng√†y trong tu·∫ßn (ti·∫øng Vi·ªát)
								const dayName = getDayName(forecastDate);
								const weatherIcon = getWeatherIcon(
									forecast.condition,
									forecast.probabilityOfRain
								);
								const rainProb = forecast.probabilityOfRain
									? `${Math.round(forecast.probabilityOfRain)}%`
									: "";

								return (
									<tr
										key={index}
										className="border-b border-gray-700 hover:bg-[#2d3748]"
									>
										<td className="py-2 pl-2 pr-2 whitespace-nowrap">
											<div className="font-medium">{dayName}</div>
										</td>
										<td className="py-2 px-1 whitespace-nowrap">
											<div
												className={`inline-block px-2 py-1 rounded-md text-white font-medium ${getAqiColorClass(
													forecast.aqi
												)}`}
											>
												{forecast.aqi}
											</div>
										</td>
										<td className="py-2 px-1 whitespace-nowrap text-center">
											<div className="text-xl">{weatherIcon}</div>
											{rainProb && (
												<div className="text-xs text-blue-400">
													{rainProb}
												</div>
											)}
										</td>
										<td className="py-2 px-1 whitespace-nowrap">
											<div className="flex items-center">
												<span className="font-medium">
													{Math.round(forecast.temperature.max)}¬∞
												</span>
												<span className="mx-1 text-gray-400">/</span>
												<span className="text-gray-300">
													{Math.round(forecast.temperature.min)}¬∞
												</span>
											</div>
										</td>
										<td className="py-2 px-1 whitespace-nowrap">
											<div className="flex items-center">
												<span className="text-gray-400 mr-1">
													{getWindDirection(forecast.wind.direction)}
												</span>
												<span>
													{Math.round(forecast.wind.speed * 3.6)} km/h
												</span>
											</div>
										</td>
										<td className="py-2 px-1 whitespace-nowrap">
											<div className="flex items-center">
												<span className="text-blue-400 mr-1">üíß</span>
												<span>{forecast.humidity}%</span>
											</div>
										</td>
									</tr>
								);
							})}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	);
};

export default DailyForecast;
